<Operating Systems>

1. Operating system(운영 체제)
컴퓨터 하드웨어를 관리하는 소프트웨어
운영체제의 기본적인 책임 : 리소스를 프로그램에 할당하는 것임.
올바른 작동을 보장하고 방해하지 않도록 프로그램을 관리 및 제어함.
사용자와 컴퓨터 하드웨어 사이를 중재함.
사용자가 프로그램을 더 편리하게 사용할 수 있는 환경을 제공함.

(참고)
메모리 == RAM
I/O 장치 == 키보드, 모니터 등
CPU안에 코어가 있음.

2. The components of a computer system
User <-> Application Programs <-> Operating System <-> Computer Hardware 
(os는 위에 언급된 장치와 application을 다 병렬적으로 일을 함.)
하드웨어 : 시스템의 기본 컴퓨팅 리소스를 제공
(리소스 : 컴퓨터 시스템에서 사용 가능한 자원이나 기능을 나타냄, 프로그램이 실행되고 데이터를 처리하는데 필요한 여러가지 요소들을 포함함.
리소스의 요소 : CPU, RAM, 파일 시스템, 네트워크 연결, 입출력 장치, 시스템 시간, 프로세스 관리)
응용 프로그램 : 워드 프로세서, 스프레드시트, 컴파일러, 웹 브라우저 등을 말함, 하드웨어의 리소를 사용함.
운영체제 : 다양한 사용자와 다양한 응용 프로그램 간의 리소스 사용을 조정

3. Operating system(운영 체제)
운영체제는 커널(Kernel)과 시스템 프로그램으로 구분됨.
os가 수행되려면, 소프트웨어로서 전원이 켜짐과 동시에 메모리에 올라가야 함. 
(그러나 os는 모두 메모리에 올라가기에는 너무 큼.)
os 중 항상 필요한 부분만을 메모리에 상주시키고 그렇지 않은 부분은 필요할 때, 메모리에 올려서 사용함.
Kernel의 정의 : 이 때, 메모리에 상주하는 os의 일부분을 커널이라고 함.

os와 사용자들은 하드웨어와 리소스를 공유하기 때문에(해킹 당할 위험이 있어서), 응용 프로그램이 함부로 시스템의 영역에 접근하지 못하도록 해야함.
os는 커널 모드(Kernel mode)와 유저 모드(User mode)로 나뉘어져 있음.
mode bit를 사용하여 이를 구분함.
커널 모드(Kernel mode) : 0
유저 모드(User mode) : 1
(크롬과 같은 프로그램 할당하는 부분은 커널 모드임. 그 다음 유저 모드로 전환됨.
즉, 커널 모드와 유저 모드를 왔다 갔다 한다.)
응용 프로그램이 실행될 때 -> 유저 모드
응용 프로그램이 시스템 콜을 통해 운영 체제에서 서비스를 요청하면 -> 커널 모드로 전환됨.
(시스템 콜 : 프로그래밍 언어에서 지원하지 않는 기능에 대하여 운영 체제의 루틴을 호출하여 이용하는 것을 말함.)

(user process == user mode)
user process executing -> calls system call ->                                                                                        return system call
(kernel == kernel mode)                            trap mode bit = 0 ->                              return mode bit =1 -> 
                                                                                        execute system call -> 

개발자는 왜 os에 대한 공부를 해야하나?
모든 코드는 os위에서 실행됨
os에 대한 지식을 통해, 프로그래머는 작성한 코드의 성능을 효과적으로 개선할 수 있음.
                                                            
4. User View / System View

사용자에게 제공되는 유용한 기능
User interface
Program execution
I/O operations
File-system manipulation
Communications
Error detection

시스템의 효율적인 작동을 보장하기 위한 동작 (개발자 측면에서 굉장히 중요한 부분임.)
Resource allocation
Logging
Protection and security

<Computer-Systems Organization>

1. 범용 컴퓨터 시스템 구성
CPU, I/O device controller, 다른 controller <- System bus ->메모리, System bus를 통해 서로 연결됨.
CPU와 장치 컨트롤러는 메모리 cycle을 얻기위해 경쟁함.

OS는 driver를 통해 device controller에 명령을 내리고 device controller와의 인터페이스를 제공함.
각 device controller를 위한 device driver가 있음.

2. Three key aspects of the system
- (1) Interrupt
- (2) Storage structure
- (3) I/O structure

(1) Interrupt
운영체제와 하드웨어가 상호작용하는 방식의 핵심
CPU가 인터럽트되면, 하던 일을 잠시 멈추고, 즉시 실행을 고정된 위치로 옮김.
인터럽트 서비스 루틴이 실행 후, 완료 되면 CPU는 중단된 일을 재개함.
(잠시 중단 시키고 실행을 고정된 위치로 옮김.
마우스를 움직이면 그래프가 잠시 내려가면서(중단)하고 마우스의 움직임에 따라 실행시키면 그래프가 정상궤도로 올라옴.)

기본 인터럽트 메커니즘
- 1. os는 I/O request가 발생하면, device driver를 통해서 해당 device controller에 명령을 내림.
- 2. Device controller가 명령받은 동작을 수행 후, 완료되면 interrupt를 생성함.
- 3. CPU가 interrupt-request line으로 신호를 발생했음을 감지함.
- 4. CPU는 진행 중인 작업을 중단하고, 중단된 작업의 주소 및 상태에 대한 정보를 저장함.
- 5. 해당 인터럽트 번호를 인터럽트 서비스 루틴의 주소를 담고 있는 배열인 인터럽트 벡터에 대한 인덱스로 사용함.
- 6. 인터럽트 서비스 루틴은 인터럽트를 처리함.
- 7. 인터럽트 이전에 진행하던 작업의 주소 및 상태로 되돌림.

System call : os에 서비스를 요청하기 위해 응용 프로그램에서 사용하는 메커니즘
(크롬에서 OS를 요청하기위해 System call을 사용함.)

내부 인터럽트(Trap)
소프트웨어에 의한 인터럽트 : 내부 오류를 알림, 시스템 콜
0 ~ 31까지의 이벤트
Synchronous (동시성)

외부 인터럽트
하드웨어에 의한 인터럽트 : 장치에서 생성
32 ~ 255까지의 이벤트
Asynchronous (비동시성)

(2) Storage structure
모든 형태의 메모리는 byte 배열을 제공함. - 각 byte에는 고유한 주소가 있음.
CPU는 메모리에서만 명령을 로드할 수 있음.
모든 프로그램을 실행하려면 먼저 메모리에 로드해야 함.
메모리에서 명령어를 가져와서 해당 명령어를 명령어 레지스터에 저장.
이 때, RAM이라고 하는 재기록 가능한 메모리에 로드함.
일반적으로 DRAM을 사용함.

모든 프로그램과 데이터가 RAM에 영구적으로 상주하는 것은 불가능함.
필요한 모든 프로그램과 데이터를 영구적으로 RAM에 저장하기에는 용량이 너무 작음.
RAM은 전원이 꺼지거나 다른 방식으로 손실 되면 내용이 손실됨.(휘발성)
(Bootstrap :컴퓨터 전원이 켜진 상태에서 운영 체제를 로드하기 위해 제일 먼저 실행하는 프로그램)
(메모리 부분은 다 byte 단위임.)
(작업 관리자를 통해 사용자가 메모리를 건들 수 있다.)

Secondary memory
대용량, 비휘발성 메모리 
대부분의 프로그램은 메모리에 로드될 때까지 보조 저장소에 저장됨.
메인 메모리보다 훨씬 느리므로, 적절한 관리가 필요함. (ex : HDDS, NVM)
(HDD, SSD - qlc, tlc, mlc (수명이 존재, 단점 : 많이 쓸 수록 cell이 마모 되서 고장이 날 수 있음.))

Storage structure
register
cache
main memory
nonvolatile memory
hard-disk drives
optical disk
magnetic tapes
(위로 갈수록 용량은 적지만 빠르다, 아래로 갈수록 용량은 많지만 느리다.)
(cpu와 RAM 사이에 캐시가 있음.
일일이 메모리에 올리면 느리기 때문에 캐시에 cpu가 필요한 것만 올려서 더 빠르게 작동시키게 함.)

Caching
컴퓨터 시스템의 매우 중요한 원리 
정보를 더 빠른 스토리지에 저장시킴.
캐시를 먼저 확인하여 정보가 있는지 확인함 -> 1. 정보가 있을 경우 캐시의 정보 사용. 2. 그렇지 않으면 데이터를 캐시에 복사하여 사용 
크기가 제한되어 있기 때문에 캐싱 / 교체 정책을 고려해야 성능을 향상 시킬 수 있음.

(3) I/O structure
컴퓨터는 계산 혹은 I/O를 처리하는 일에 대부분의 시간을 사용함.
OS는 I/O를 처리하는 일에 대부분의 시간을 사용
bus를 통해 CPU가 device controller I/O 명령을 내림.

Types of I/O
Polling(busy-waiting) : 종료할 때까지 반복해서 레지스터를 읽음
interrupt
DMA : 컨트롤러에서 직접 I/O 작업을 처리하는 것을 의미, 대량 데이터 이동에 적합

범용 컴퓨터 시스템 : 공통 버스를 통해 데이터를 교환하는 여러 장치로 구성되어 있음.
인터럽트 구동 I/O형식 : 소량의 데이터를 이동하는데 적합하지만, 대량 데이터 이동에 사용할 경우 높은 오버헤드를 생성할 수 있음. 
-> 이 문제를 해결하기 위해 DMA(direct memory access)가 사용됨.

DMA
장치에 대한 버퍼, 포인터, 카운터를 설정한 후, Device controller가 CPU의 개입 없이 전체 데이터 블록을 장치 및 주 메모리로 직접 전송.
블록당 하나의 인터럽트만 생성
즉, CPU에 올리지 않고 바로 메모리로 전송함.
(DMA는 시스템 버스 없이 직접 메모리에 전송가능하게 함.)

<Computer-Systems Architecture> - 매우 중요
프로세스(Process) : 실행 중인 프로그램으로, 메모리에 할당된 코드 및 데이터와 함께 독립적으로 실행되는 단위임.
프로세서(Processor) : 주로 CPU를 가리키지만, GPU와 같은 다양한 연산 장치를 포함하는 개념으로, 컴퓨터에서 연산을 수행하는 하드웨어 장치임.

1. Single-Processor Systems
단일 코어 CPU가 하나만 있는 경우
과거에 사용되었던 시스템, 그러나 현재의 컴퓨터 시스템이 단일 프로세서 시스템인 경우는 거의 없음.
(옛날 컴퓨터 : CPU안에 코어 1개)

2. Multiprocessor Systems
CPU가 2개 이상인 경우
프로세서 수를 늘리면 더 짧은 시간에 더 많은 작업을 수행할 수 있음. 
N개의 CPU가 있는 경우 N개의 프로세스가 실행될 수 있음. 그러나 N개의 프로세서의 성능 향상이 N배가 되는 것은 아님. 그보다 작다. 
공유 리소스에 대한 프로세스들끼리의 경쟁이 일어나기 때문에, 여러 프로세서를 사용할 때 일정량의 오버헤드가 발생함.
CPU 하나는 유휴 상태에 있고 다른 것은 과부하 상태일 수 있어 비효율적일 수 있음
(유휴 상태 : 컴퓨터 시스템이 사용 가능한 상태이나 실제적인 작업이 없는 시간.)
요즘은 멀티 프로세서의 정의에 단일 칩에 여러 컴퓨팅 코어가 있는 Multicore system이 포함됨.

3. Multicore Systems
on-chip 통신이 between-chip 통신보다 빠르기 때문에, 멀티코어 시스템은 단일 코어가 있는 여러 프로세서보다 더 효율적임.
(코어끼리 통신(on-chip 통신)이 CPU끼리의 통신(between-chip 통신)보다 더 빠르다.
요새는 Multicore Systems을 사용함.)
(다중 코어 시스템에서는 여러 개의 코어가 하나의 칩(칩 안에 통합된 경우) 또는 하나의 패키지에 통합되어 있음. 
이렇게 하면 코어 간 통신이 빠르고 효율적으로 이루어짐. 
On-Chip 통신은 CPU의 캐시와 같은 공유 자원을 활용하여 코어 간 데이터 전송을 최적화할 수 있음.

Between-Chip 통신은 여러 CPU 또는 다중 프로세서 시스템에서 각 CPU 또는 프로세서 간에 데이터를 전송하기 위해 
외부 버스나 인터커넥트를 사용해야 함. 
이 경우 전기적인 신호가 외부로 나가고 들어가야 하므로 더 많은 지연이 발생할 수 있음.
최근에는 Multicore Systems이 일반적으로 사용됨. 
이는 단일 칩에 여러 코어를 집적하여 성능을 향상시키고 전력 소모를 줄이기 위한 효율적인 방법으로 채택되고 있음.)
(여러 개의 코어가 있는 하나의 프로세서는 여러 개의 단일 코어 칩보다 훨씬 적은 전력을 사용)

4. Types of Multiprocessor Systems

- (1) Asymmetric(비대칭) multiprocessing
하나의 프로세서가 master, 나머지 프로세서는 slave
Master가 slave를 제어함.
마스터 프로세서에서만 OS가 수행되어, slave 프로세서에 프로세스를 할당하거나, 데이터 및 I/O 관리를 수행

- (2) Symmetric(대칭) multiprocessing
프로세서는 모두 평등함.
각 프로세서는 메모리를 공유하고 서로 직접 상호 작용함.

5. Clustered system
여러 개의 컴퓨터 시스템이 네트워크로 연결되어 있는 구조
고성능 컴퓨팅 환경 제공
유지보수의 어려움, 성능이 네트워크 환경에 매우 영향을 받음
여러 개의 시스템이 1개인 척 하는 것.

<Operating Systems Structure>

1. Multiprogramming
여러 프로그램을 메모리에 로드해 둔다.
하나의 프로그램을 선택하여 실행함.
한 프로세스가 대기 상태가 되면 다른 프로세스를 수행함. -> 이렇게 되면 CPU의 사용 효율을 조금이나마 높일 수 있음.

2. Multitasking
프로세스마다 작업 시간을 정해두고 번갈아가면서 작업하는 방식이다.
프로세스들이 빠르게 번갈아가며 메모리를 사용하면, 사용자 입장에서는 마치 동시에 작동하는 것처럼 보이게 됨.
반응 시간(Response time)을 줄이는 것이 중요함.
Time sharing이라고도 부름.

CPU 스케줄링 : 여러 프로세스가 동시에 실행될 준비가 되면, 시스템은 다음에 실행할 프로세스를 선택해야 함.
메모리 관리 : 동시에 메모리에 여러 프로세스를 보유해야 함.